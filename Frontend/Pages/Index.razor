@page "/"
@using Markdown.ColorCode
@using Markdig
@using Azure.AI.OpenAI
@inject OpenAIClient aiClient
@inject IHttpClientFactory _httpClientFactory
@inject ILogger<Index> _logger

<PageTitle>AugmentR</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">AugmentR</MudText>
<MudText Class="mb-8">AugmentR is a .NET Aspire app that uses Azure Semantic Kernel to communicate with Azure OpenAI. You can augment the LLM with additional content by using the site navigation. For example, AugmentR's built-in URL parsing features enable you to drop in a public Internet URL. Then, AugmentR will read the text of the site and augment the model with the updated content. </MudText>

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudPaper Class="pa-4">
        <MudTextField T="string" @ref="_question"
                      Label="Question:" @bind-Value="@_incomingMessage"
                      AutoFocus="true" />
    </MudPaper>
    <MudPaper Class="pa-4 mt-4">
        <MudStack Row="true">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       DisableElevation="true" OnClick="@(async ()=> await GenerateNextParagraph())">Send</MudButton>
            @if (_showProgress)
            {
                <MudProgressCircular @ref="_progress"
                                     Color="Color.Primary" Size="Size.Medium"
                                     Indeterminate="true" Class="ml-5" />
            }
        </MudStack>
    </MudPaper>
</MudForm>

<MudStack>
    @if (chatCompletionOptions != null && chatCompletionOptions.Messages != null)
    {
        @foreach (var message in chatCompletionOptions.Messages.OfType<ChatRequestAssistantMessage>())
        {
            <MudPaper Class="pa-4 mt-4">
                <MudStack Row="true">
                    @if (message.Role != ChatRole.User)
                    {
                        <MudAvatar Color="Color.Primary" Variant="Variant.Filled" Class="mr-8">
                            <MudIcon Icon="@(Icons.Material.Filled.ChatBubble)" />
                        </MudAvatar>
                    }
                    @if (message.Role == ChatRole.User)
                    {
                        <MudAvatar Color="Color.Info" Variant="Variant.Filled" Class="mr-8">
                            <MudIcon Icon="@(Icons.Material.Filled.Person)" />
                        </MudAvatar>
                    }
                    <MudText Typo="Typo.body2" Class="mb-2">@((MarkupString)Markdown.ToHtml(message.Content, _pipeline))</MudText>
                </MudStack>
            </MudPaper>
        }
    }
</MudStack>

@code {
    bool _showProgress = false;
    bool success;
    string[] errors = { };
    string? _incomingMessage = "What is .NET Aspire?";
    MudForm? form = null;
    MudTextField<string>? _question = null;
    MudProgressCircular? _progress = null;
    MarkdownPipeline _pipeline = new MarkdownPipelineBuilder()
                                        .UseAdvancedExtensions()
                                            .Build();

    private ChatCompletionsOptions chatCompletionOptions = new ChatCompletionsOptions()
    {
        DeploymentName = "gpt-35-turbo",
        Messages =
        {
            new ChatRequestSystemMessage("You are a support chatbot who provides helpful responses in markdown format.")
        }
        };

    private async Task GenerateNextParagraph()
    {
        if (chatCompletionOptions.Messages.Count > 1)
        {
            chatCompletionOptions.Messages.Add(
                new ChatRequestUserMessage(_incomingMessage)
            );
        }

        var response = await aiClient.GetChatCompletionsAsync(chatCompletionOptions);
        var x = new ChatRequestAssistantMessage(response.Value.Choices[0].Message);
        chatCompletionOptions.Messages.Add(x);

        this.StateHasChanged();
    }
}